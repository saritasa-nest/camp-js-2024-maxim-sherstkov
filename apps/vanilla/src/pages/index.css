@import url("../global/index.css");

/* Catalog and filters */
.catalog {
  display: flex;
  gap: var(--space-6);
}

@media screen and (max-width: 786px) {
  .catalog {
    flex-direction: column-reverse;
  }
}

/* Books section */
.books-category {
  display: flex;
  flex-direction: column;
  position: relative;
}

.books-category__sticky-container {
  position: sticky;
  padding: var(--space-6) 0;
  top: 0;
  background-color: var(--color-surface);
}

/* Books list inside of category */
.books-list {
  --grid-columns: 5;

  display: grid;
  grid-template-columns: repeat(var(--grid-columns), minmax(0, 180px));
  gap: var(--space-4);
}

@media screen and (max-width: 1280px) {
  .books-list {
    --grid-columns: 4;
  }
}

@media screen and (max-width: 786px) {
  .books-list {
    --grid-columns: 3;
  }
}

@media screen and (max-width: 360px) {
  .books-list {
    --grid-columns: 2;
  }
}

/* Books filters styles */
.catalog__filter {
  --filter-width: 320px;

  padding-top: var(--space-6);
  position: relative;

  /* With this filters doesn't stick to the right */
  width: var(--filter-width);
  min-width: var(--filter-width);
}

@media screen and (max-width: 1280px) {
  .catalog__filter {
    --filter-width: 276px;
  }
}

@media screen and (max-width: 786px) {
  .catalog__filter {
    --filter-width: 100%;
  }
}

.fixed-container {
  position: fixed;
  width: inherit;
  display: flex;
  flex-direction: column;
  gap: var(--space-2);
}

@media screen and (max-width: 786px) {
  .fixed-container {
    position: static;
  }
}

/* Filters form styles */
.filter-form {
  display: flex;
  flex-direction: column;
  gap: var(--space-6);
  place-items: flex-start;
}

@media screen and (max-width: 786px) {
  .filter-form {
    flex-direction: row;
    place-items: center;
  }
}

@media screen and (max-width: 360px) {
  .filter-form {
    flex-direction: column;
    place-items: flex-start;
  }
}

/* Search input and select common styles */
.filter-form__search,
.filter-form__select {
  position: relative;
  flex: 1 1 0;
  width: 100%;
}

.filter-form__search input::placeholder,
.filter-form__select select {
  color: var(--color-on-surface-dim);
  opacity: 1;
}

.filter-form__search input,
.filter-form__select select {
  background-color: var(--color-surface-overlay);
  height: 48px;
  width: 100%;
  border: none;
  border-radius: var(--border-radius-sm);
  display: block;
}

/* Search input specific styles */
.filter-form__search input {
  padding-block: var(--space-2);
  padding-left: var(--space-12);
}

.filter-form__search i {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  left: var(--space-4);
}

/* Select specific styles */
.filter-form__select {
  position: relative;
}

.filter-form__select select {
  padding: var(--space-2) var(--space-4);
  appearance: none;
}

.filter-form__select i {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  right: var(--space-4);
}

/* Checkbox styles */
.filter-form__checkbox {
  display: block;
  position: relative;
  cursor: pointer;
  padding-left: var(--space-9);
  user-select: none;
  flex: 0 0 25%;
}

/* Hide default checkbox  */
.checkbox__input {
  position: absolute;
  opacity: 0;
  cursor: pointer;
  height: 0;
  width: 0;
}

/* Create a custom checkbox */
.checkbox__mark {
  position: absolute;
  top: 6px;
  left: 0;
  height: 20px;
  width: 20px;
  background-color: var(--color-surface);
  border-radius: var(--border-radius-xxs);
  border: 2px solid var(--color-border);
}

/* Create the checkmark/indicator (hidden when not checked) */
.checkbox__mark::after {
  content: "";
  position: absolute;
  display: none;
  left: 3px;
  top: 3px;
  width: 10px;
  height: 10px;
  border-radius: 2px;
  background-color: var(--color-primary);
}

.checkbox__input:checked ~ .checkbox__mark {
  border: 2px solid var(--color-primary);
}

.filter-form__checkbox:hover .checkbox__input ~ .checkbox__mark {
  background-color: var(--color-surface-overlay);
}

/* Show the checkmark when checked */
.checkbox__input:checked ~ .checkbox__mark::after {
  display: block;
}
